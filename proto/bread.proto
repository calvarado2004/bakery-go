syntax = "proto3";

package  bread;



option go_package = "github.com/calvarado2004/bakery-go/bread";


message Bread {
    int32 id = 1;
    string name = 2;
    float price = 3;
    int32 quantity = 4;
    string description = 5;
    string type = 6;
    string status = 7;
    string createdAt = 8;
    string updatedAt = 9;
    string image = 10;
}

message BuyOrder {
  int32 id = 1;
  int32 customerId = 2;
}

message BuyOrderDetails {
  int32 buyOrderId = 1;
  int32 breadId = 2;
  int32 quantity = 3;
  float price = 4;
  string status = 5;
}

message BuyOrderList {
  repeated BuyOrder buyOrders = 1;
}

message MakeOrder {
  int32 id = 1;
  int32 breadMakerId = 2;
}

message MakeOrderDetails {
  int32 makeOrderId = 1;
  int32 breadId = 2;
  int32 quantity = 3;
  float price = 4;
}

message BreadList {
    repeated Bread breads = 1;
}

message BreadRequest {
    BreadList breads = 3;
    string buy_order_uuid = 2;
    string make_order_uuid = 4;
}

message BreadResponse {
    string message = 1;
    BreadList breads = 3;
    string error = 4;
    int32 buy_order_id = 5;
    int32 make_order_id = 6;
    string buy_order_uuid = 7;
    string make_order_uuid = 8;
}

service MakeBread {

    rpc BakeBread(BreadRequest) returns (BreadResponse) {

    }

    rpc SendBreadToBakery(BreadRequest) returns (BreadResponse) {

    }

    rpc MadeBreadStream(BreadRequest) returns (stream BreadResponse) {

    }
}

service CheckInventory {

    rpc CheckBreadInventory(BreadRequest) returns (BreadResponse) {

    }

    rpc CheckBreadInventoryStream(BreadRequest) returns (stream BreadResponse) {


    }

}

service BuyBread {

      rpc BuyBread(BreadRequest) returns (BreadResponse) {

      }

      rpc BuyBreadStream(BreadRequest) returns (stream BreadResponse) {

      }

}

service RemoveOldBread {

      rpc RemoveBread(BreadRequest) returns (BreadResponse) {

      }

      rpc RemoveBreadStream(BreadRequest) returns (stream BreadResponse) {

      }

}