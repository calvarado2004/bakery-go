// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/bread.proto

package bread

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RequestBreadClient is the client API for RequestBread service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RequestBreadClient interface {
	GetBread(ctx context.Context, in *BreadRequest, opts ...grpc.CallOption) (*BreadResponse, error)
}

type requestBreadClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestBreadClient(cc grpc.ClientConnInterface) RequestBreadClient {
	return &requestBreadClient{cc}
}

func (c *requestBreadClient) GetBread(ctx context.Context, in *BreadRequest, opts ...grpc.CallOption) (*BreadResponse, error) {
	out := new(BreadResponse)
	err := c.cc.Invoke(ctx, "/bread.RequestBread/GetBread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestBreadServer is the server API for RequestBread service.
// All implementations must embed UnimplementedRequestBreadServer
// for forward compatibility
type RequestBreadServer interface {
	GetBread(context.Context, *BreadRequest) (*BreadResponse, error)
	mustEmbedUnimplementedRequestBreadServer()
}

// UnimplementedRequestBreadServer must be embedded to have forward compatible implementations.
type UnimplementedRequestBreadServer struct {
}

func (UnimplementedRequestBreadServer) GetBread(context.Context, *BreadRequest) (*BreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBread not implemented")
}
func (UnimplementedRequestBreadServer) mustEmbedUnimplementedRequestBreadServer() {}

// UnsafeRequestBreadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestBreadServer will
// result in compilation errors.
type UnsafeRequestBreadServer interface {
	mustEmbedUnimplementedRequestBreadServer()
}

func RegisterRequestBreadServer(s grpc.ServiceRegistrar, srv RequestBreadServer) {
	s.RegisterService(&RequestBread_ServiceDesc, srv)
}

func _RequestBread_GetBread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestBreadServer).GetBread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.RequestBread/GetBread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestBreadServer).GetBread(ctx, req.(*BreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RequestBread_ServiceDesc is the grpc.ServiceDesc for RequestBread service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RequestBread_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bread.RequestBread",
	HandlerType: (*RequestBreadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBread",
			Handler:    _RequestBread_GetBread_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bread.proto",
}

// AddClientToQueueClient is the client API for AddClientToQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddClientToQueueClient interface {
	AddClient(ctx context.Context, in *ClientsInQueue, opts ...grpc.CallOption) (*ClientsInQueue, error)
}

type addClientToQueueClient struct {
	cc grpc.ClientConnInterface
}

func NewAddClientToQueueClient(cc grpc.ClientConnInterface) AddClientToQueueClient {
	return &addClientToQueueClient{cc}
}

func (c *addClientToQueueClient) AddClient(ctx context.Context, in *ClientsInQueue, opts ...grpc.CallOption) (*ClientsInQueue, error) {
	out := new(ClientsInQueue)
	err := c.cc.Invoke(ctx, "/bread.AddClientToQueue/AddClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddClientToQueueServer is the server API for AddClientToQueue service.
// All implementations must embed UnimplementedAddClientToQueueServer
// for forward compatibility
type AddClientToQueueServer interface {
	AddClient(context.Context, *ClientsInQueue) (*ClientsInQueue, error)
	mustEmbedUnimplementedAddClientToQueueServer()
}

// UnimplementedAddClientToQueueServer must be embedded to have forward compatible implementations.
type UnimplementedAddClientToQueueServer struct {
}

func (UnimplementedAddClientToQueueServer) AddClient(context.Context, *ClientsInQueue) (*ClientsInQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClient not implemented")
}
func (UnimplementedAddClientToQueueServer) mustEmbedUnimplementedAddClientToQueueServer() {}

// UnsafeAddClientToQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddClientToQueueServer will
// result in compilation errors.
type UnsafeAddClientToQueueServer interface {
	mustEmbedUnimplementedAddClientToQueueServer()
}

func RegisterAddClientToQueueServer(s grpc.ServiceRegistrar, srv AddClientToQueueServer) {
	s.RegisterService(&AddClientToQueue_ServiceDesc, srv)
}

func _AddClientToQueue_AddClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientsInQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddClientToQueueServer).AddClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.AddClientToQueue/AddClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddClientToQueueServer).AddClient(ctx, req.(*ClientsInQueue))
	}
	return interceptor(ctx, in, info, handler)
}

// AddClientToQueue_ServiceDesc is the grpc.ServiceDesc for AddClientToQueue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddClientToQueue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bread.AddClientToQueue",
	HandlerType: (*AddClientToQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddClient",
			Handler:    _AddClientToQueue_AddClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bread.proto",
}

// GetBreadListClient is the client API for GetBreadList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetBreadListClient interface {
	GetBreadList(ctx context.Context, in *BreadList, opts ...grpc.CallOption) (*BreadList, error)
}

type getBreadListClient struct {
	cc grpc.ClientConnInterface
}

func NewGetBreadListClient(cc grpc.ClientConnInterface) GetBreadListClient {
	return &getBreadListClient{cc}
}

func (c *getBreadListClient) GetBreadList(ctx context.Context, in *BreadList, opts ...grpc.CallOption) (*BreadList, error) {
	out := new(BreadList)
	err := c.cc.Invoke(ctx, "/bread.GetBreadList/GetBreadList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetBreadListServer is the server API for GetBreadList service.
// All implementations must embed UnimplementedGetBreadListServer
// for forward compatibility
type GetBreadListServer interface {
	GetBreadList(context.Context, *BreadList) (*BreadList, error)
	mustEmbedUnimplementedGetBreadListServer()
}

// UnimplementedGetBreadListServer must be embedded to have forward compatible implementations.
type UnimplementedGetBreadListServer struct {
}

func (UnimplementedGetBreadListServer) GetBreadList(context.Context, *BreadList) (*BreadList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBreadList not implemented")
}
func (UnimplementedGetBreadListServer) mustEmbedUnimplementedGetBreadListServer() {}

// UnsafeGetBreadListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetBreadListServer will
// result in compilation errors.
type UnsafeGetBreadListServer interface {
	mustEmbedUnimplementedGetBreadListServer()
}

func RegisterGetBreadListServer(s grpc.ServiceRegistrar, srv GetBreadListServer) {
	s.RegisterService(&GetBreadList_ServiceDesc, srv)
}

func _GetBreadList_GetBreadList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BreadList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetBreadListServer).GetBreadList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.GetBreadList/GetBreadList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetBreadListServer).GetBreadList(ctx, req.(*BreadList))
	}
	return interceptor(ctx, in, info, handler)
}

// GetBreadList_ServiceDesc is the grpc.ServiceDesc for GetBreadList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetBreadList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bread.GetBreadList",
	HandlerType: (*GetBreadListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBreadList",
			Handler:    _GetBreadList_GetBreadList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bread.proto",
}

// DeleteClientFromQueueClient is the client API for DeleteClientFromQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeleteClientFromQueueClient interface {
	DeleteClient(ctx context.Context, in *ClientsInQueue, opts ...grpc.CallOption) (*ClientsInQueue, error)
}

type deleteClientFromQueueClient struct {
	cc grpc.ClientConnInterface
}

func NewDeleteClientFromQueueClient(cc grpc.ClientConnInterface) DeleteClientFromQueueClient {
	return &deleteClientFromQueueClient{cc}
}

func (c *deleteClientFromQueueClient) DeleteClient(ctx context.Context, in *ClientsInQueue, opts ...grpc.CallOption) (*ClientsInQueue, error) {
	out := new(ClientsInQueue)
	err := c.cc.Invoke(ctx, "/bread.DeleteClientFromQueue/DeleteClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeleteClientFromQueueServer is the server API for DeleteClientFromQueue service.
// All implementations must embed UnimplementedDeleteClientFromQueueServer
// for forward compatibility
type DeleteClientFromQueueServer interface {
	DeleteClient(context.Context, *ClientsInQueue) (*ClientsInQueue, error)
	mustEmbedUnimplementedDeleteClientFromQueueServer()
}

// UnimplementedDeleteClientFromQueueServer must be embedded to have forward compatible implementations.
type UnimplementedDeleteClientFromQueueServer struct {
}

func (UnimplementedDeleteClientFromQueueServer) DeleteClient(context.Context, *ClientsInQueue) (*ClientsInQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (UnimplementedDeleteClientFromQueueServer) mustEmbedUnimplementedDeleteClientFromQueueServer() {}

// UnsafeDeleteClientFromQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeleteClientFromQueueServer will
// result in compilation errors.
type UnsafeDeleteClientFromQueueServer interface {
	mustEmbedUnimplementedDeleteClientFromQueueServer()
}

func RegisterDeleteClientFromQueueServer(s grpc.ServiceRegistrar, srv DeleteClientFromQueueServer) {
	s.RegisterService(&DeleteClientFromQueue_ServiceDesc, srv)
}

func _DeleteClientFromQueue_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientsInQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleteClientFromQueueServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.DeleteClientFromQueue/DeleteClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleteClientFromQueueServer).DeleteClient(ctx, req.(*ClientsInQueue))
	}
	return interceptor(ctx, in, info, handler)
}

// DeleteClientFromQueue_ServiceDesc is the grpc.ServiceDesc for DeleteClientFromQueue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeleteClientFromQueue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bread.DeleteClientFromQueue",
	HandlerType: (*DeleteClientFromQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteClient",
			Handler:    _DeleteClientFromQueue_DeleteClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bread.proto",
}

// ShowWaitingQueueClient is the client API for ShowWaitingQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShowWaitingQueueClient interface {
	ShowQueue(ctx context.Context, in *ClientsInQueue, opts ...grpc.CallOption) (*ClientsInQueue, error)
}

type showWaitingQueueClient struct {
	cc grpc.ClientConnInterface
}

func NewShowWaitingQueueClient(cc grpc.ClientConnInterface) ShowWaitingQueueClient {
	return &showWaitingQueueClient{cc}
}

func (c *showWaitingQueueClient) ShowQueue(ctx context.Context, in *ClientsInQueue, opts ...grpc.CallOption) (*ClientsInQueue, error) {
	out := new(ClientsInQueue)
	err := c.cc.Invoke(ctx, "/bread.ShowWaitingQueue/ShowQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShowWaitingQueueServer is the server API for ShowWaitingQueue service.
// All implementations must embed UnimplementedShowWaitingQueueServer
// for forward compatibility
type ShowWaitingQueueServer interface {
	ShowQueue(context.Context, *ClientsInQueue) (*ClientsInQueue, error)
	mustEmbedUnimplementedShowWaitingQueueServer()
}

// UnimplementedShowWaitingQueueServer must be embedded to have forward compatible implementations.
type UnimplementedShowWaitingQueueServer struct {
}

func (UnimplementedShowWaitingQueueServer) ShowQueue(context.Context, *ClientsInQueue) (*ClientsInQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowQueue not implemented")
}
func (UnimplementedShowWaitingQueueServer) mustEmbedUnimplementedShowWaitingQueueServer() {}

// UnsafeShowWaitingQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShowWaitingQueueServer will
// result in compilation errors.
type UnsafeShowWaitingQueueServer interface {
	mustEmbedUnimplementedShowWaitingQueueServer()
}

func RegisterShowWaitingQueueServer(s grpc.ServiceRegistrar, srv ShowWaitingQueueServer) {
	s.RegisterService(&ShowWaitingQueue_ServiceDesc, srv)
}

func _ShowWaitingQueue_ShowQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientsInQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowWaitingQueueServer).ShowQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.ShowWaitingQueue/ShowQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowWaitingQueueServer).ShowQueue(ctx, req.(*ClientsInQueue))
	}
	return interceptor(ctx, in, info, handler)
}

// ShowWaitingQueue_ServiceDesc is the grpc.ServiceDesc for ShowWaitingQueue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShowWaitingQueue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bread.ShowWaitingQueue",
	HandlerType: (*ShowWaitingQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowQueue",
			Handler:    _ShowWaitingQueue_ShowQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bread.proto",
}
